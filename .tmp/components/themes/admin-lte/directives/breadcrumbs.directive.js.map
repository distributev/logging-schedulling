{"version":3,"sources":["components/themes/admin-lte/directives/breadcrumbs.directive.js"],"names":[],"mappings":"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","file":"components/themes/admin-lte/directives/breadcrumbs.directive.js","sourcesContent":["(function() {\n  'use strict';\n\n  angular.module('admin-lte').directive('breadcrumbs', breadcrumbs);\n\n  breadcrumbs.$inject = ['$interpolate', '$state'];\n\n  function breadcrumbs($interpolate, $state) {\n    return {\n      restrict: 'E',\n      templateUrl: function() {\n        return 'components/themes/admin-lte/views/breadcrumbs.view.html';\n      },\n      scope: {\n        displayName: '@',\n        abstractProxy: '@?'\n      },\n      link: function(scope) {\n        /**\n         * Start with the current state and traverse up the path to build the\n         * array of breadcrumbs that can be used in an ng-repeat in the template.\n         */\n        function updateBreadcrumbsArray() {\n          var workingState;\n          var displayName;\n          var breadcrumbs = [];\n          var currentState = $state.$current;\n\n          while (currentState && currentState.name !== '') {\n            workingState = getWorkingState(currentState);\n            if (workingState) {\n              displayName = getDisplayName(workingState);\n\n              if (displayName !== false && !stateAlreadyInBreadcrumbs(workingState, breadcrumbs)) {\n                breadcrumbs.push({\n                  displayName: displayName,\n                  route: workingState.name\n                });\n              }\n            }\n            currentState = currentState.parent;\n          }\n          breadcrumbs.reverse();\n          scope.breadcrumbs = breadcrumbs;\n        }\n\n        /**\n         * Get the state to put in the breadcrumbs array, taking into account that if the current state is abstract,\n         * we need to either substitute it with the state named in the `scope.abstractProxy` property, or\n         * set it to `false` which means this breadcrumb level will be skipped entirely.\n         * @param currentState\n         * @returns {*}\n         */\n        function getWorkingState(currentState) {\n          var proxyStateName;\n          var workingState = currentState;\n          if (currentState.abstract === true) {\n            if (typeof scope.abstractProxy !== 'undefined') {\n              proxyStateName = getObjectValue(scope.abstractProxy, currentState);\n              if (proxyStateName) {\n                workingState = $state.get(proxyStateName);\n\n                // TODO: Temporary HACK ;) To be used in $interpolate later\n                if (workingState.isLocalManuallyAdded || !workingState.locals) {\n                  workingState.locals = currentState.locals;\n                  workingState.isLocalManuallyAdded = true;\n                }\n              } else {\n                workingState = false;\n              }\n            } else {\n              workingState = false;\n            }\n          }\n          return workingState;\n        }\n\n        /**\n         * Resolve the displayName of the specified state. Take the property specified by the `displayName`\n         * attribute and look up the corresponding property on the state's config object. The specified string can be interpolated against any resolved\n         * properties on the state config object, by using the usual {{ }} syntax.\n         * @param currentState\n         * @returns {*}\n         */\n        function getDisplayName(currentState) {\n          var interpolationContext;\n          var propertyReference;\n          var displayName;\n\n          if (!scope.displayName) {\n\n            // if the displayName attribute was not specified, default to the state's name\n            return currentState.name;\n          }\n          propertyReference = getObjectValue(scope.displayName, currentState);\n\n          if (propertyReference === false) {\n            return false;\n          } else if (typeof propertyReference === 'undefined') {\n            return currentState.name;\n          } else {\n\n            // use the $interpolate service to handle any bindings in the propertyReference string.\n            interpolationContext = (typeof currentState.locals !== 'undefined') ? currentState.locals.globals : currentState;\n            displayName = $interpolate(propertyReference)(interpolationContext);\n            return displayName;\n          }\n        }\n\n        /**\n         * Given a string of the type 'object.property.property', traverse the given context (eg the current $state object) and return the\n         * value found at that path.\n         *\n         * @param objectPath\n         * @param context\n         * @returns {*}\n         */\n        function getObjectValue(objectPath, context) {\n          var i;\n          var propertyArray = objectPath.split('.');\n          var propertyReference = context;\n\n          for (i = 0; i < propertyArray.length; i++) {\n            if (angular.isDefined(propertyReference[propertyArray[i]])) {\n              propertyReference = propertyReference[propertyArray[i]];\n            } else {\n\n              // if the specified property was not found, default to the state's name\n              return undefined;\n            }\n          }\n          return propertyReference;\n        }\n\n        /**\n         * Check whether the current `state` has already appeared in the current breadcrumbs array. This check is necessary\n         * when using abstract states that might specify a proxy that is already there in the breadcrumbs.\n         * @param state\n         * @param breadcrumbs\n         * @returns {boolean}\n         */\n        function stateAlreadyInBreadcrumbs(state, breadcrumbs) {\n          var i;\n          var alreadyUsed = false;\n          for (i = 0; i < breadcrumbs.length; i++) {\n            if (breadcrumbs[i].route === state.name) {\n              alreadyUsed = true;\n            }\n          }\n          return alreadyUsed;\n        }\n\n        scope.breadcrumbs = [];\n        if ($state.$current.name !== '') {\n          updateBreadcrumbsArray();\n        }\n        scope.$on('$stateChangeSuccess', function() {\n          updateBreadcrumbsArray();\n        });\n      }\n    };\n  }\n})();\n"],"sourceRoot":"/source/"}