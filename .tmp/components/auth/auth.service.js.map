{"version":3,"sources":["components/auth/auth.service.js"],"names":[],"mappings":"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","file":"components/auth/auth.service.js","sourcesContent":["'use strict';\n\n(function() {\n\n  function AuthService($location, $http, $cookies, $q, appConfig, Util, User) {\n    var safeCb = Util.safeCb;\n    var currentUser = {};\n    var userRoles = appConfig.userRoles || [];\n\n    if ($cookies.get('token') && $location.path() !== '/logout') {\n      currentUser = User.get();\n    }\n\n    var Auth = {\n\n      /**\n       * Authenticate user and save token\n       *\n       * @param  {Object}   user     - login info\n       * @param  {Function} callback - optional, function(error, user)\n       * @return {Promise}\n       */\n      login({\n        email,\n        password\n      }, callback) {\n        return $http.post('/auth/local', {\n            email: email,\n            password: password\n          })\n          .then(res => {\n            $cookies.put('token', res.data.token);\n            currentUser = User.get();\n            return currentUser.$promise;\n          })\n          .then(user => {\n            safeCb(callback)(null, user);\n            return user;\n          })\n          .catch(err => {\n            Auth.logout();\n            safeCb(callback)(err.data);\n            return $q.reject(err.data);\n          });\n      },\n\n      /**\n       * Delete access token and user info\n       */\n      logout() {\n        $cookies.remove('token');\n        currentUser = {};\n      },\n\n      /**\n       * Create a new user\n       *\n       * @param  {Object}   user     - user info\n       * @param  {Function} callback - optional, function(error, user)\n       * @return {Promise}\n       */\n      createUser(user, callback) {\n        return User.save(user, function(data) {\n            $cookies.put('token', data.token);\n            currentUser = User.get();\n            return safeCb(callback)(null, user);\n          }, function(err) {\n            Auth.logout();\n            return safeCb(callback)(err);\n          })\n          .$promise;\n      },\n\n      /**\n       * Change password\n       *\n       * @param  {String}   oldPassword\n       * @param  {String}   newPassword\n       * @param  {Function} callback    - optional, function(error, user)\n       * @return {Promise}\n       */\n      changePassword(oldPassword, newPassword, callback) {\n        return User.changePassword({\n            id: currentUser._id\n          }, {\n            oldPassword: oldPassword,\n            newPassword: newPassword\n          }, function() {\n            return safeCb(callback)(null);\n          }, function(err) {\n            return safeCb(callback)(err);\n          })\n          .$promise;\n      },\n\n      /**\n       * Gets all available info on a user\n       *   (synchronous|asynchronous)\n       *\n       * @param  {Function|*} callback - optional, funciton(user)\n       * @return {Object|Promise}\n       */\n      getCurrentUser(callback) {\n        if (arguments.length === 0) {\n          return currentUser;\n        }\n\n        var value = currentUser.hasOwnProperty('$promise') ? currentUser.$promise : currentUser;\n        return $q.when(value)\n          .then(user => {\n            safeCb(callback)(user);\n            return user;\n          }, () => {\n            safeCb(callback)({});\n            return {};\n          });\n      },\n\n      /**\n       * Check if a user is logged in\n       *   (synchronous|asynchronous)\n       *\n       * @param  {Function|*} callback - optional, function(is)\n       * @return {Bool|Promise}\n       */\n      isLoggedIn(callback) {\n        if (arguments.length === 0) {\n          return currentUser.hasOwnProperty('role');\n        }\n\n        return Auth.getCurrentUser(null)\n          .then(user => {\n            var is = user.hasOwnProperty('role');\n            safeCb(callback)(is);\n            return is;\n          });\n      },\n\n      /**\n       * Check if a user has a specified role or higher\n       *   (synchronous|asynchronous)\n       *\n       * @param  {String}     role     - the role to check against\n       * @param  {Function|*} callback - optional, function(has)\n       * @return {Bool|Promise}\n       */\n      hasRole(role, callback) {\n        var hasRole = function(r, h) {\n          return userRoles.indexOf(r) >= userRoles.indexOf(h);\n        };\n\n        if (arguments.length < 2) {\n          return hasRole(currentUser.role, role);\n        }\n\n        return Auth.getCurrentUser(null)\n          .then(user => {\n            var has = user.hasOwnProperty('role') ? hasRole(user.role, role) : false;\n            safeCb(callback)(has);\n            return has;\n          });\n      },\n\n      /**\n       * Check if a user is an admin\n       *   (synchronous|asynchronous)\n       *\n       * @param  {Function|*} callback - optional, function(is)\n       * @return {Bool|Promise}\n       */\n      isAdmin() {\n        return Auth.hasRole.apply(Auth, [].concat.apply(['admin'], arguments));\n      },\n\n      /**\n       * Get auth token\n       *\n       * @return {String} - a token string used for authenticating\n       */\n      getToken() {\n        return $cookies.get('token');\n      },\n\n\t    /**\n       * Change theme\n       *\n       * @param theme\n       * @param callback\n       * @returns {*|Function}\n\t     */\n      changeTheme(theme, callback) {\n        return User.changeTheme({\n          id: currentUser._id\n        }, {\n          theme: theme\n        }, function() {\n          currentUser.theme = theme;\n          return safeCb(callback)(null);\n        }, function(err) {\n          return safeCb(callback)(err);\n        })\n          .$promise;\n      }\n    };\n\n    return Auth;\n  }\n\n  angular.module('angularFullstackApp.auth')\n    .factory('Auth', AuthService);\n})();\n"],"sourceRoot":"/source/"}